/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : PDF Document
 #	author : miyako
 #	2017/10/13
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- PDF Document

		case 1 :
			PDF_GET_DOCUMENT_ATTRIBUTES(pResult, pParams);
			break;

		case 2 :
			PDF_SET_DOCUMENT_ATTRIBUTES(pResult, pParams);
			break;

	}
}

// --------------------------------- PDF Document ---------------------------------

#define PDF_TITLE 1
#define PDF_AUTHOR 2
#define PDF_SUBJECT 3
#define PDF_CREATOR 4
#define PDF_PRODUCER 5
#define PDF_KEYWORDS 6
#define PDF_CREATION_DATE 7
#define PDF_MODIFICATION_DATE 8
#define PDF_PAGE_COUNT 9
#define PDF_MAJOR_VERSION 10
#define PDF_MINOR_VERSION 11
#define PDF_ALLOWS_PRINTING 12
#define PDF_ALLOWS_COPYING 13
#define PDF_IS_LOCKED 14
#define PDF_IS_ENCRYPTED 15
#define PDF_PERMISSIONS 16

#include "libjson.h"

void json_conv(NSString *value, std::wstring &u32)
{
	if(value)
	{
		C_TEXT t;
		CUTF8String u8;
		
		t.setUTF16String(value);
		
		uint32_t dataSize = (t.getUTF16Length() * sizeof(wchar_t))+ sizeof(wchar_t);
		std::vector<char> buf(dataSize);
		
		PA_ConvertCharsetToCharset((char *)t.getUTF16StringPtr(),
															 t.getUTF16Length() * sizeof(PA_Unichar),
															 eVTC_UTF_16,
															 (char *)&buf[0],
															 dataSize,
															 eVTC_UTF_32);
		
		u32 = std::wstring((wchar_t *)&buf[0]);
		
	}else
	{
		u32 = L"";
	}
	
}

void json_set_text(JSONNODE *n, const wchar_t *name, NSString *value)
{
	if(n)
	{
		if(value)
		{
			std::wstring w32;
			json_conv(value, w32);
			
			JSONNODE *e = json_get(n, name);
			if(e)
			{
				json_set_a(e, w32.c_str());//over-write existing value
			}else
			{
				json_push_back(n, json_new_a(name, w32.c_str()));
			}
			
		}else
		{
			JSONNODE *e = json_get(n, name);
			if(e)
			{
				json_nullify(e);//over-write existing value
			}else
			{
				JSONNODE *node = json_new_a(name, L"");
				json_nullify(node);
				json_push_back(n, node);
			}
		}
	}
}

void json_stringify(JSONNODE *json, CUTF16String &t, BOOL pretty = NO)
{
	json_char *json_string = pretty ? json_write_formatted(json) : json_write(json);
	std::wstring wstr = std::wstring(json_string);
	
#if VERSIONWIN
	t = CUTF16String((const PA_Unichar *)wstr.c_str(), (uint32_t)wstr.length());
#else
	uint32_t dataSize = (uint32_t)((wstr.length() * sizeof(wchar_t))+ sizeof(PA_Unichar));
	std::vector<char> buf(dataSize);
	uint32_t len = PA_ConvertCharsetToCharset((char *)wstr.c_str(),
																						(PA_long32)(wstr.length() * sizeof(wchar_t)),
																						eVTC_UTF_32,
																						(char *)&buf[0],
																						dataSize,
																						eVTC_UTF_16);
	t = CUTF16String((const PA_Unichar *)&buf[0], len / sizeof(PA_Unichar));
#endif
}

void array_param_set_string(PA_Variable param, NSInteger i, NSString *value)
{
	value = value ? value : @"";
	
	uint32_t dataSize = (uint32_t)([value length] * sizeof(PA_Unichar)) + sizeof(PA_Unichar);
	void *buf = malloc(dataSize);

	if(buf)
	{
		memset(buf, 0, dataSize);
		[value getCharacters:(unichar *)buf range:NSMakeRange(0, [value length])];
		PA_Unistring str = PA_CreateUnistring((PA_Unichar *)buf);
		PA_SetStringInArray(param, (PA_long32)i, &str);
		free(buf);
	}
}

void array_param_set_string(PA_Variable param, NSInteger i, NSArray *arr)
{
	@autoreleasepool
	{
		NSString *value = arr ? [arr componentsJoinedByString:@","] : @"";
		
		array_param_set_string(param, i, value);
	}

}

void array_param_set_int(PA_Variable param2, PA_Variable param3, PA_long32 i, JSONNODE *json, const wchar_t *name, NSInteger value)
{
	PA_SetLongintInArray(param2, i, i);
	
	@autoreleasepool
	{
		array_param_set_string(param3, i, (NSString *)[NSString stringWithFormat:@"%u", (unsigned int)value]);
	}

	json_push_back(json, json_new_i(name, value));
}

void array_param_set_bool(PA_Variable param2, PA_Variable param3, PA_long32 i, JSONNODE *json, const wchar_t *name, BOOL value)
{
	PA_SetLongintInArray(param2, i, i);
	
	@autoreleasepool
	{
		array_param_set_string(param3, i, (NSString *)[NSString stringWithFormat:@"%u", (unsigned int)value]);
	}
	
	json_push_back(json, json_new_b(name, value));
}

void array_param_set_string(PA_Variable param2, PA_Variable param3, PA_long32 i, JSONNODE *json, const wchar_t *name, NSString *value)
{
	PA_SetLongintInArray(param2, i, i);
	
	array_param_set_string(param3, i, value);
	json_set_text(json, name, value ? value : @"");
}

void array_param_set_string(PA_Variable param2, PA_Variable param3, PA_long32 i, JSONNODE *json, const wchar_t *name, NSDate *value)
{
	PA_SetLongintInArray(param2, i, i);
	
	@autoreleasepool
	{
		NSString *date = value ? [value description] : @"";
		array_param_set_string(param3, i ,date);
		json_set_text(json, name, date);
	}

}

void array_param_set_array(PA_Variable param2, PA_Variable param3, PA_long32 i, JSONNODE *json, const wchar_t *name, NSArray *values)
{
	PA_SetLongintInArray(param2, i, i);
	
	array_param_set_string(param3, i ,values);
	
	JSONNODE *arr = json_new(JSON_ARRAY);
	[values enumerateObjectsUsingBlock:(^(id obj, NSUInteger idx, BOOL *stop){
		
		std::wstring u32;
		NSString *value = (NSString *)obj;
		json_conv(value, u32);
		JSONNODE *n = json_new(JSON_STRING);
		json_set_a(n, u32.c_str());
		json_push_back(arr, n);
		
	})];
	json_push_back(json, arr);
	json_set_name(arr, name);
}

#pragma mark -

void PDF_GET_DOCUMENT_ATTRIBUTES(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	PA_Variable param2 = (*(PA_Variable *)pParams[1]);
	PA_ResizeArray(&param2, 0);
	PA_SetArrayCurrent(&param2, 0);
	
	PA_Variable param3 = (*(PA_Variable *)pParams[2]);
	PA_ResizeArray(&param3, 0);
	PA_SetArrayCurrent(&param3, 0);
	
	JSONNODE *json = json_new(JSON_NODE);
	
	Param1.fromParamAtIndex(pParams, 1);

	NSURL *url = Param1.copyUrl();
	
	if(url)
	{
		PDFDocument *pdf = [[PDFDocument alloc]initWithURL:url];
		
		if(pdf)
		{
			PA_ResizeArray(&param2, (PA_long32)16);
			PA_ResizeArray(&param3, (PA_long32)16);
			
			NSInteger majorVersion = pdf.majorVersion;//PDF_MAJOR_VERSION
			NSInteger minorVersion = pdf.minorVersion;//PDF_MINOR_VERSION
			BOOL isEncrypted = pdf.isEncrypted;//PDF_IS_ENCRYPTED
			BOOL isLocked = pdf.isLocked;//PDF_IS_LOCKED
			BOOL allowsCopying = pdf.allowsCopying;//PDF_ALLOWS_COPYING
			BOOL allowsPrinting = pdf.allowsPrinting;//PDF_ALLOWS_PRINTING
			NSUInteger pageCount = pdf.pageCount;//PDF_PAGE_COUNT
			PDFDocumentPermissions permissionsStatus = pdf.permissionsStatus;//PDF_PERMISSIONS
			NSDictionary *attributes = pdf.documentAttributes;
			NSString *title = [attributes objectForKey:PDFDocumentTitleAttribute];//PDF_TITLE
			NSString *author = [attributes objectForKey:PDFDocumentAuthorAttribute];//PDF_AUTHOR
			NSString *subject = [attributes objectForKey:PDFDocumentSubjectAttribute];//PDF_SUBJECT
			NSString *creator = [attributes objectForKey:PDFDocumentCreatorAttribute];//PDF_CREATOR
			NSString *producer = [attributes objectForKey:PDFDocumentProducerAttribute];//PDF_PRODUCER
			NSArray *keywords = [attributes objectForKey:PDFDocumentKeywordsAttribute];//PDF_KEYWORDS
			NSDate *creationDate = [attributes objectForKey:PDFDocumentCreationDateAttribute];//PDF_CREATION_DATE
			NSDate *modificationDate = [attributes objectForKey:PDFDocumentModificationDateAttribute];//PDF_MODIFICATION_DATE

			array_param_set_int(param2, param3, PDF_MAJOR_VERSION, json, L"majorVersion", majorVersion);
			array_param_set_int(param2, param3, PDF_MINOR_VERSION, json, L"minorVersion", minorVersion);
			array_param_set_int(param2, param3, PDF_PAGE_COUNT, json, L"pageCount", pageCount);
			array_param_set_int(param2, param3, PDF_PERMISSIONS, json, L"permissionsStatus", permissionsStatus);
			
			array_param_set_bool(param2, param3, PDF_IS_ENCRYPTED, json, L"isEncrypted", isEncrypted);
			array_param_set_bool(param2, param3, PDF_IS_LOCKED, json, L"isLocked", isLocked);
			array_param_set_bool(param2, param3, PDF_ALLOWS_COPYING, json, L"allowsCopying", allowsCopying);
			array_param_set_bool(param2, param3, PDF_ALLOWS_PRINTING, json, L"allowsPrinting", allowsPrinting);

			array_param_set_string(param2, param3, PDF_CREATION_DATE, json, L"creationDate", creationDate);
			array_param_set_string(param2, param3, PDF_MODIFICATION_DATE, json, L"modificationDate", modificationDate);
			array_param_set_string(param2, param3, PDF_TITLE, json, L"title", title);
			array_param_set_string(param2, param3, PDF_AUTHOR, json, L"author", author);
			array_param_set_string(param2, param3, PDF_SUBJECT, json, L"subject", subject);
			array_param_set_string(param2, param3, PDF_CREATOR, json, L"creator", creator);
			array_param_set_string(param2, param3, PDF_PRODUCER, json, L"producer", producer);
			
			array_param_set_array(param2, param3, PDF_KEYWORDS, json, L"keywords", keywords);
			
			[pdf release];
		}
		
		[url release];
	}
	
	//->$3[0]
	CUTF16String t;
	json_stringify(json, t);
	PA_Unistring str = PA_CreateUnistring((PA_Unichar *)t.c_str());
	PA_SetStringInArray(param3, 0, &str);
	json_delete(json);
	
	//->$2
	PA_Variable *pParam2 = ((PA_Variable *)pParams[1]);
	pParam2->fFiller = 0;
	pParam2->uValue.fArray.fCurrent = param2.uValue.fArray.fCurrent;
	pParam2->uValue.fArray.fNbElements = param2.uValue.fArray.fNbElements;
	pParam2->uValue.fArray.fData = param2.uValue.fArray.fData;
	
	//->$3
	PA_Variable *pParam3 = ((PA_Variable *)pParams[2]);
	pParam3->fFiller = 0;
	pParam3->uValue.fArray.fCurrent = param3.uValue.fArray.fCurrent;
	pParam3->uValue.fArray.fNbElements = param3.uValue.fArray.fNbElements;
	pParam3->uValue.fArray.fData = param3.uValue.fArray.fData;
}

void array_param_set_dictionary_key(NSMutableDictionary *attributes, NSString *key, PA_Variable param, PA_long32 i)
{
	PA_Unistring str = PA_GetStringInArray(param, i);
	
	NSString *value = [[NSString alloc]initWithCharacters:(const unichar *)str.fString length:str.fLength];
	if(value)
	{
		[attributes setObject:value forKey:key];
		[value release];
	}
}

void array_param_set_dictionary_key_date(NSMutableDictionary *attributes, NSString *key, PA_Variable param, PA_long32 i)
{
	PA_Unistring str = PA_GetStringInArray(param, i);
	
	NSString *value = [[NSString alloc]initWithCharacters:(const unichar *)str.fString length:str.fLength];
	if(value)
	{
		@autoreleasepool
		{
			NSDate *date = [NSDate dateWithString:value];
			[attributes setObject:date ? date : [NSNull null] forKey:key];
		}
		[value release];
	}
}

void array_param_set_dictionary_key_array(NSMutableDictionary *attributes, NSString *key, PA_Variable param, PA_long32 i)
{
	PA_Unistring str = PA_GetStringInArray(param, i);
	
	NSString *value = [[NSString alloc]initWithCharacters:(const unichar *)str.fString length:str.fLength];
	if(value)
	{
		@autoreleasepool
		{
			[attributes setObject:[value componentsSeparatedByString:@","] forKey:key];
		}
		[value release];
	}
}

void PDF_SET_DOCUMENT_ATTRIBUTES(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	PA_Variable param2 = (*(PA_Variable *)pParams[1]);
	PA_Variable param3 = (*(PA_Variable *)pParams[2]);
	
	NSURL *url = Param1.copyUrl();
	
	if(url)
	{
		PDFDocument *pdf = [[PDFDocument alloc]initWithURL:url];
		
		if(pdf)
		{
			NSMutableDictionary *attributes = [[NSMutableDictionary alloc]initWithDictionary:pdf.documentAttributes];
			
			PA_VariableKind param2_kind = PA_GetVariableKind(param2);
			PA_VariableKind param3_kind = PA_GetVariableKind(param3);
			
			if((param2_kind == eVK_ArrayLongint) && (param3_kind == eVK_ArrayUnicode))
			{
				PA_long32 param2_count = PA_GetArrayNbElements(param2);
				PA_long32 param3_count = PA_GetArrayNbElements(param3);
				if(param2_count == param3_count)
				{
					for(unsigned int i = 1; i <= param2_count; ++i)
					{
						PA_long32 key = PA_GetLongintInArray(param2, i);
						switch (key)
						{
							case PDF_TITLE:
								array_param_set_dictionary_key(attributes, PDFDocumentTitleAttribute, param3, i);
								break;
							case PDF_AUTHOR:
								array_param_set_dictionary_key(attributes, PDFDocumentAuthorAttribute, param3, i);
								break;
							case PDF_SUBJECT:
								array_param_set_dictionary_key(attributes, PDFDocumentSubjectAttribute, param3, i);
								break;
							case PDF_CREATOR:
								array_param_set_dictionary_key(attributes, PDFDocumentCreatorAttribute, param3, i);
								break;
							case PDF_PRODUCER:
								array_param_set_dictionary_key(attributes, PDFDocumentProducerAttribute, param3, i);
								break;
							case PDF_KEYWORDS:
								array_param_set_dictionary_key_array(attributes, PDFDocumentKeywordsAttribute, param3, i);
								break;
							case PDF_CREATION_DATE:
								array_param_set_dictionary_key_date(attributes, PDFDocumentCreationDateAttribute, param3, i);
								break;
							case PDF_MODIFICATION_DATE:
								array_param_set_dictionary_key_date(attributes, PDFDocumentModificationDateAttribute, param3, i);
								break;
							case PDF_PAGE_COUNT:
							case PDF_MAJOR_VERSION:
							case PDF_MINOR_VERSION:
							case PDF_ALLOWS_PRINTING:
							case PDF_ALLOWS_COPYING:
							case PDF_IS_LOCKED:
							case PDF_IS_ENCRYPTED:
							case PDF_PERMISSIONS:
								break;
						}	
					}
				}
			}
			
			[pdf setDocumentAttributes:attributes];
			[pdf writeToURL:url];
			[pdf release];
			
			[attributes release];
		}
	
		[url release];
	}

}

